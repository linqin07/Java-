package ReentrantLock;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ConditionDemo1 {
    /**
     * ÈªòËÆ§Âíåsynchronize‰∏ÄÊ†∑ÊòØÈùûÂÖ¨Âπ≥ÈîÅ„ÄÇ
     * ÈªòËÆ§‰∏çÊòØÂÖ¨Âπ≥ÈîÅüîíÔºåÈùûÂÖ¨Âπ≥ÊòØ‰∏ÄÁßçÊä¢Âç†Êú∫Âà∂ÔºåÊòØÈöèÊú∫Ëé∑ÂæóÈîÅÔºåÂπ∂‰∏çÊòØÂÖàÊù•ÁöÑ‰∏ÄÂÆöËÉΩÂÖàÂæóÂà∞ÈîÅÔºåÁªìÊûúÂ∞±ÊòØ‰∏çÂÖ¨Âπ≥ÁöÑ„ÄÇ
     * ÂÖ¨Âπ≥ÈîÅÂ∞±ÊòØË∑ü‰∏äÈîÅÁöÑÈ°∫Â∫èÊó†ÂÖ≥ÔºåÈöèÊú∫Ëé∑ÂæóÈîÅÂØπË±°„ÄÇÈùûÂÖ¨Âπ≥Â∞±ÊòØÊåâÁÖßÂä†ÈîÅÁöÑÈ°∫Â∫èËøõË°åÂàÜÈÖç„ÄÇ
     */
    Lock lock = new ReentrantLock();
    Condition conditionA = lock.newCondition();
    Condition conditionB = lock.newCondition();

    public static void main(String[] args) throws Exception {
        ConditionDemo1 demo = new ConditionDemo1();

        new Thread(() -> demo.await(demo.conditionA), "thread-1").start();
        new Thread(() -> demo.await(demo.conditionB), "thread-2").start();

        new Thread(() -> demo.signal(demo.conditionA), "thread-3").start();
        System.out.println("....");
        Thread.sleep(5000);


        new Thread(() -> demo.signal(demo.conditionB), "thread-4").start();
    }

    private void await(Condition condition) {
        try {
            lock.lock();
            System.out.println(Thread.currentThread().getName() + "ÂºÄÂßãawait");
            condition.await();
            System.out.println(Thread.currentThread().getName() + " awaitÁªìÊùü");
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }

    private void signal(Condition condition) {
        lock.lock();
        System.out.println(Thread.currentThread().getName() + "ÂºÄÂßãsignal");
        condition.signal();
        lock.unlock();
    }
}
